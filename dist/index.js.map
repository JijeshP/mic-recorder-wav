{"version":3,"file":"index.js","sources":["../src/wav-encoder.js","../src/mic-recorder.js"],"sourcesContent":[" class WavEncoder {\n  constructor(config) {\n    this.config = {\n      sampleRate: 44100,\n      bitRate: 128\n    };\n    \n    this.sampleRate = 16000;\n    this.numChannels = 1;\n    this.numSamples = 0;\n    this.dataViews = [];\n \n    // Audio is processed by frames of 1152 samples per audio channel\n    // http://lame.sourceforge.net/tech-FAQ.txt\n    this.maxSamples = 1152;\n\n    this.samplesMono = null;\n    this.cleanup();\n  }\n \n    setString(view, offset, str) {\n    var len = str.length;\n    for (var i = 0; i < len; ++i)\n      view.setUint8(offset + i, str.charCodeAt(i));\n  };\n   \n  encode(buffer) {\n     \n     var len = buffer[0].length,\n        nCh = this.numChannels,\n        view = new DataView(new ArrayBuffer(len * nCh * 2)),\n        offset = 0;\n    for (var i = 0; i < len; ++i)\n      for (var ch = 0; ch < nCh; ++ch) {\n        var x = buffer[ch][i] * 0x7fff;\n        view.setInt16(offset, x < 0 ? Math.max(x, -0x8000) : Math.min(x, 0x7fff), true);\n        offset += 2;\n      }\n \n    this.dataViews.push(view);\n    this.numSamples += len;\n  }\n\n \n  cleanup(){\n    this.dataBuffer = [];\n  }\n\n  floatTo16BitPCM(input, output) {\n    for (let i = 0; i < input.length; i++) {\n      const s = Math.max(-1, Math.min(1, input[i]));\n      output[i] = (s < 0 ? s * 0x8000 : s * 0x7FFF);\n    }\n  }\n   convertBuffer(arrayBuffer) {\n    const data = new Float32Array(arrayBuffer);\n    const out = new Int16Array(arrayBuffer.length);\n    this.floatTo16BitPCM(data, out);\n\n    return out;\n  }\n\n  finish() {\n     var dataSize = this.numChannels * this.numSamples * 2,\n        view = new DataView(new ArrayBuffer(44));\n    this.setString(view, 0, 'RIFF');\n    view.setUint32(4, 36 + dataSize, true);\n    this.setString(view, 8, 'WAVE');\n    this.setString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, this.numChannels, true);\n    view.setUint32(24, this.sampleRate, true);\n    view.setUint32(28, this.sampleRate * 4, true);\n    view.setUint16(32, this.numChannels * 2, true);\n    view.setUint16(34, 16, true);\n    this.setString(view, 36, 'data');\n    view.setUint32(40, dataSize, true);\n    this.dataViews.unshift(view); \n    var blob = new Blob(this.dataViews, { type: 'audio/wav' });\n    this.cleanup();\n    return blob;\n  }\n};\n\nexport default WavEncoder;\n","import WavEncoder from './wav-encoder';\n\nclass MicRecorder {\n  constructor(config) {\n    this.config = {\n      // 128 or 160 kbit/s â€“ mid-range bitrate quality\n      bitRate: 128,\n      // There is a known issue with some macOS machines, where the recording\n      // will sometimes have a loud 'pop' or 'pop-click' sound. This flag\n      // prevents getting audio from the microphone a few milliseconds after\n      // the begining of the recording. It also helps to remove the mouse\n      // \"click\" sound from the output mp3 file.\n      startRecordingAt: 300,\n      deviceId: null,\n    };\n\n    this.activeStream = null;\n    this.context = null;\n    this.microphone = null;\n    this.processor = null;\n    this.startTime = 0;\n\n    Object.assign(this.config, config);\n  }\n\n  /**\n   * Starts to listen for the microphone sound\n   * @param {MediaStream} stream\n   */\n  addMicrophoneListener(stream) {\n    this.activeStream = stream;\n\n    // This prevents the weird noise once you start listening to the microphone\n    this.timerToStart = setTimeout(() => {\n      delete this.timerToStart;\n    }, this.config.startRecordingAt);\n\n    // Set up Web Audio API to process data from the media stream (microphone).\n    this.microphone = this.context.createMediaStreamSource(stream);\n\n    // Settings a bufferSize of 0 instructs the browser to choose the best bufferSize\n    this.processor = this.context.createScriptProcessor(0, 1, 1);\n\n    // Add all buffers from LAME into an array.\n    this.processor.onaudioprocess = (event) => {\n      if (this.timerToStart) {\n        return;\n      }\n        var buffers = [];\n        buffers[0] = event.inputBuffer.getChannelData(0);\n      // Send microphone data to LAME for MP3 encoding while recording.\n      this.wavEncoder.encode(buffers);\n    };\n\n    // Begin retrieving microphone data.\n    this.microphone.connect(this.processor);\n    this.processor.connect(this.context.destination);\n  };\n\n  /**\n   * Disconnect microphone, processor and remove activeStream\n   */\n  stop() {\n    if (this.processor && this.microphone) {\n      // Clean up the Web Audio API resources.\n      this.microphone.disconnect();\n      this.processor.disconnect();\n\n      // If all references using this.context are destroyed, context is closed\n      // automatically. DOMException is fired when trying to close again\n      if (this.context && this.context.state !== 'closed') {\n        this.context.close();\n      }\n\n      this.processor.onaudioprocess = null;\n\n      // Stop all audio tracks. Also, removes recording icon from chrome tab\n      this.activeStream.getAudioTracks().forEach(track => track.stop());\n    }\n\n    return this;\n  };\n\n  /**\n   * Requests access to the microphone and start recording\n   * @return Promise\n   */\n  start() {\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    this.context = new AudioContext({sampleRate: 16000});\n    this.config.sampleRate = this.context.sampleRate;\n \n    this.wavEncoder = new WavEncoder()\n\n    const audio = this.config.deviceId ? { deviceId: { exact: this.config.deviceId } } : true;\n\n    return new Promise((resolve, reject) => {\n      navigator.mediaDevices.getUserMedia({ audio })\n        .then(stream => {\n          this.addMicrophoneListener(stream);\n          resolve(stream);\n        }).catch(function(err) {\n          reject(err);\n        });\n    })\n  };\n\n  /**\n   * Return Wav Buffer and Blob with type mp3\n   * @return {Promise}\n   */\n  getWav() {\n    const finalBlob = this.wavEncoder.finish();\n    return new Promise((resolve, reject) => {\n      if (!finalBlob) {\n        reject(new Error('No buffer to send'));\n      } else {\n        resolve(['finalBuffer', finalBlob]);\n        this.wavEncoder.cleanup();\n      }\n    });\n  };\n};\n\nexport default MicRecorder;\n"],"names":["WavEncoder","config","sampleRate","numChannels","numSamples","dataViews","maxSamples","samplesMono","cleanup","view","offset","str","len","length","i","setUint8","charCodeAt","buffer","nCh","DataView","ArrayBuffer","ch","x","setInt16","Math","max","min","push","dataBuffer","input","output","s","arrayBuffer","data","Float32Array","out","Int16Array","floatTo16BitPCM","dataSize","setString","setUint32","setUint16","unshift","blob","Blob","type","MicRecorder","activeStream","context","microphone","processor","startTime","assign","stream","timerToStart","setTimeout","startRecordingAt","createMediaStreamSource","createScriptProcessor","onaudioprocess","event","buffers","inputBuffer","getChannelData","wavEncoder","encode","connect","destination","disconnect","state","close","getAudioTracks","forEach","track","stop","AudioContext","window","webkitAudioContext","audio","deviceId","exact","Promise","resolve","reject","mediaDevices","getUserMedia","then","addMicrophoneListener","catch","err","finalBlob","finish","Error"],"mappings":"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"}